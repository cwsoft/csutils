
********************************************************************************
** EXAMPLES FOR EXTRACTING BASIC FILE INFORMATION
********************************************************************************
>> Initiate textparser object with a multi-line string.
>> tp = Textparser(source='This is line 1.\n'This is line 2.\n')
>> pprint(tp)
<Textparser: Source 'String' with 2 lines>

>> print(tp.source)
'String'

>> pprint(tp.lines)
2

>> Initiate textparser object with data from input file.
>> tp = Textparser(source=../tests/data/test.dat)
>> pprint(tp)
<Textparser: Source 'C:\Dev\04_PyDev\csutils3\csutils\tests\data\test.dat' with 20 lines>

>> pprint(tp.source)
'C:\\Dev\\04_PyDev\\csutils3\\csutils\\tests\\data\\test.dat'

>> pprint(tp.lines)
20

********************************************************************************
** EXAMPLES FOR EXTRACTING TEXT LINES FROM INPUT FILE
********************************************************************************
>> Output source lines prepend by it's row indices (00..99: line)
>> tp.get_numbered_source_lines(output=True, nbrFormat='2d')
00: This is the first line.
01: 
02: Some dummy values:
03: Frequency = 50 Hz
04: FREQUENCY = 60 Hz
05: FrEqUeNcY = 70 Hz
06: frequency = 80 Hz
07: 
08: A 4x4 Matrix:
09: 1  2  3  4
10: 5  6  7  8
11: 9  10 11 12
12: 13 14 15 16
13: 
14: A 3x3 Matrix as Fortran fixed format
15: 123
16: 456
17: 789
18: 
19: This is the very last line.

>> Get all source lines from start to end.
>> lines = tp.get_lines()
>> pprint(lines)
('This is the first line.\n'
 '\n'
 'Some dummy values:\n'
 'Frequency = 50 Hz\n'
 'FREQUENCY = 60 Hz\n'
 'FrEqUeNcY = 70 Hz\n'
 'frequency = 80 Hz\n'
 '\n'
 'A 4x4 Matrix:\n'
 '1  2  3  4\n'
 '5  6  7  8\n'
 '9  10 11 12\n'
 '13 14 15 16\n'
 '\n'
 'A 3x3 Matrix as Fortran fixed format\n'
 '123\n'
 '456\n'
 '789\n'
 '\n'
 'This is the very last line.\n')

>> Get first line as string with default end char '\n' appended.
>> pprint(tp.get_lines(rows=0))
'This is the first line.\n'

>> Get last line as string with default end char '\n' appended.
>> pprint(tp.get_lines(rows='-1'))
'This is the very last line.\n'

>> Get first and last line as string. Lines merged by '\n' and last line append by '\n'.
>> pprint(tp.get_lines(rows='0, -1'))
'This is the first line.\nThis is the very last line.\n'

>> Get lines 3+4 as string, with lines merged by ';' and no end char appended.
>> pprint(tp.get_lines(rows=(3.0, '4.0'), merge=';', end='')
'Some dummy values:;Frequency = 50 Hz'
>> pprint(tp.get_lines(rows='2.0, 3.0', merge=';', end='')
'Some dummy values:;Frequency = 50 Hz'
>> pprint(tp.get_lines(rows='2:3,3:4', merge=';', end='')
'Some dummy values:;Frequency = 50 Hz'

>> Get all source textlines in reverse order.
>> pprint(tp.get_lines(rows='::-1'))
('This is the very last line.\n'
 '\n'
 '789\n'
 '456\n'
 '123\n'
 'A 3x3 Matrix as Fortran fixed format\n'
 '\n'
 '13 14 15 16\n'
 '9  10 11 12\n'
 '5  6  7  8\n'
 '1  2  3  4\n'
 'A 4x4 Matrix:\n'
 '\n'
 'frequency = 80 Hz\n'
 'FrEqUeNcY = 70 Hz\n'
 'FREQUENCY = 60 Hz\n'
 'Frequency = 50 Hz\n'
 'Some dummy values:\n'
 '\n'
 'This is the first line.\n')

>> Get every second text line starting from source line 3.
>> tp.get_lines(rows='2::2')
('Some dummy values:\n'
 'FREQUENCY = 60 Hz\n'
 'frequency = 80 Hz\n'
 'A 4x4 Matrix:\n'
 '5  6  7  8\n'
 '13 14 15 16\n'
 'A 3x3 Matrix as Fortran fixed format\n'
 '456\n')

>> Get all lines containing frequency and lines of the 4x4 matrix.
>> tp.get_lines(rows='3,4,5,6,9,10,11,12,13', merge=';', end='')
Frequency = 50 Hz;FREQUENCY = 60 Hz;FrEqUeNcY = 70 Hz;frequency = 80 Hz;1  2  3  4;5  6  7  8;9  10 11 12;13 14 15 16

>> Get all lines containing frequency and all lines of the 4x4 matrix.
>> tp.get_lines(rows='3:7:1, 9:13', merge=';', end='')
Frequency = 50 Hz;FREQUENCY = 60 Hz;FrEqUeNcY = 70 Hz;frequency = 80 Hz;1  2  3  4;5  6  7  8;9  10 11 12;13 14 15 16

********************************************************************************
** EXAMPLES FOR METHODS GET_MATCH AND GET_MATCHES
********************************************************************************
>> Get all matches of 'FREQUENCY' (case insensitive)
>> matches = tp.get_matches('FREQUENCY')
>> pprint(matches)
[(3, 'Frequency = 50 Hz\n'),
 (4, 'FREQUENCY = 60 Hz\n'),
 (5, 'FrEqUeNcY = 70 Hz\n'),
 (6, 'frequency = 80 Hz\n')]

>> Get tuple with first match of FREQUENCY (case sensitive) and unpack to idx and line.
>> idx, line = tp.get_match('FREQUENCY', ignoreCase=False)
>> print(f'Line index: {idx}, Line string: {line}')
Line index: 4, Line string: FREQUENCY = 60 Hz

>> Get last match of 'freq' (case insensitive, partial)
>> pprint(tp.get_matches('freq')[-1])
(6, 'frequency = 80 Hz\n')

>> Get all source lines containing at least one digit surrounded by at least on whitespace
>> Note: If pattern starts with 'rx:', the part behind is evaluated as regular expression.
>> Note: '\s+':= one or more white space chars, '\d+':= one ore more digits [0-9].
>> pprint(tp.get_matches(pattern='rx:\s+\d+\s+'), ignoreCase=True
[(3, 'Frequency = 50 Hz\n'), (4, 'FREQUENCY = 60 Hz\n'), (5, 'FrEqUeNcY = 70 Hz\n'), (6, 'frequency = 80 Hz\n'), (9, '1  2  3  4\n'), (10, '5  6  7  8\n'), (11, '9  10 11 12\n'), (12, '13 14 15 16\n')]

>> Get all source lines containing a digit matching {10, 20, .., 70}
>> Note: '[1-7]0':= matches single digit between 1-7 directly followed by 0.
>> pprint(tp.get_matches(pattern='rx:[1-7]0'), ignoreCase=True
[(3, 'Frequency = 50 Hz\n'), (4, 'FREQUENCY = 60 Hz\n'), (5, 'FrEqUeNcY = 70 Hz\n'), (11, '9  10 11 12\n')]

>> Get source lines containing 'Frequency', where line before contains '60' and line after '80'.
>> Note: Subpatterns are optional and defined rel. to the line matching the main pattern.
>> Subpatterns is a collections of tuples: [(rowOffset1, subpattern1), .., (rowOffset2, subpattern2)]
>> match = tp.get_matches(pattern='Frequency', subpattens=[(-1, '60'), (1, '80')])
[(5, 'FrEqUeNcY = 70 Hz\n')]

>> Get source lines containing 'Frequency', if number [50,60,70,80] is present two lines below.
>> Note: Patterns starting with 'rx:' will perform a regular expression search on the source lines.
>> match = tp.get_matches(pattern='Frequency', subpattens=(2, 'rx:[5-8]0'))
[(3, 'Frequency = 50 Hz\n'), (4, 'FREQUENCY = 60 Hz\n')]

>> Get first source line containing 'Frequency', if number [50,60,70,80] is present two lines below.
>> match = tp.get_match(pattern='Frequency', subpattens=(2, 'rx:[5-8]0'))
(3, 'Frequency = 50 Hz\n')

********************************************************************************
** EXAMPLES FOR EXTRACTING VALUES VIA THE GET_VALUES METHOD
********************************************************************************
>> Extract 4x4 matrix elements from textfile lines 10-13 as multi-line string.
>> Note: The stop value of a slice is not included in Python (hence rows:='9:13')
>> matrix_4x4 = tp.get_values(rows='9:13')
>> print(matrix_4x4)
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16

>> pprint(matrix_4x4)
'1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n'

>> Extract 4x4 matrix elements from textfile, join columns by ',' and lines by ';'.
>> Note: Last end char removed for multiple values by default unless end char is '\n'.
>> matrix_4x4_formatted = tp.get_values(rows='9:13', merge=',', end=';')
>> pprint(matrix_4x4_formatted)
'1,2,3,4;5,6,7,8;9,10,11,12;13,14,15,16'

>> Extract single 4x4 matrix element from 2nd row and 2nd col.
>> element_r2c2 = tp.get_values(rows=10, cols=1)
>> pprint(element_r2c2)
'6'

>> Extract 4x4 matrix elements of the second row.
>> matrix_2nd_row = tp.get_values(rows=10)
>> pprint(matrix_2nd_row)
'5 6 7 8\n'

>> Extract 4x4 matrix elements of the second row, join elements by ',' and lines by ';'.
>> Note: Last end char removed for multiple values by default unless end char is '\n'.
>> matrix_2nd_row_skip_end = tp.get_values(rows='10', merge=',', end=';')
>> pprint(matrix_2nd_row_formatted)
'5,6,7,8'

>> Extract 4x4 matrix elements of the second column as multi-line string.
>> matrix_2nd_col = tp.get_values(rows='9:13', cols='1.0')
>> pprint(matrix_2nd_col)
'2\n6\n10\n14\n'

>> Extract 4x4 matrix elements of second column, join elements by ','.
>> Note: Set 'end' char instead 'merge', as we join row values in case of a single column!!!
>> matrix_last_col = tp.get_values(rows=9:13, cols=['1.0'], end=',')
>> pprint(matrix_last_col_formatted)
'2,6,10,14'

>> Extract 2x2 submatrix from center of the 4x4 matrix as multi-line string.
>> matrix_2x2 = tp.get_values(rows='10.0, 11.0', cols='1.0, 2.0')
>> print(matrix_2x2)
6 7
10 11

>> Extract 2x2 submatrix from center of the 4x4 matrix, join elements by ',' and lines by ';'.
>> Note: Last 'end' char is stripped off by default, unless 'end' is set to '\n'.
>> matrix_2x2_formatted = tp.get_values(rows=[10, 11], cols=('1', '2.8'), merge=',', end=';')
>> pprint(matrix_2x2_formatted)
'6,7;10,11'

>> Extract 3x3 submatrix from Fortran fixed format w/o spaces using multi-slice strings.
>> Tipp: Using cols='0:1,1:2,2:3' allows to extract values as string indices from source line.
>> matrix_3x3 = tp.get_values(rows='15:18', cols='0:1,1:2,2:3')
>> print(matrix_3x3
1 2 3
4 5 6
7 8 9

>> pprint(matrix_3x3
'1 2 3\n4 5 6\n7 8 9\n'

>> Extract 3x3 submatrix from Fortran fixed format w/o spaces, join cols by ',' and rows by ';'
>> matrix_3x3_formatted = tp.get_values(rows='15:18', cols='0:1,1:2,2:3'), merge=',', end=';'
>> pprint(matrix_3x3_formatted)
'1,2,3;4,5,6;7,8,9'

********************************************************************************
** EXAMPLES FOR SOME BASIC FILE OPERATIONS
********************************************************************************
>> Write 3x3 matrix as multi-line string to './dummy.out'.
>> Set append=False to overwrite an possible existing outfile.
>> Textparser.write(./dummy.out, lines=matrix_3x3, append=False)

>> Append formated 3x3 matrix to existing './dummy.out'.
>> Set append=True to append output to an existing outfile.
>> Textparser.write(./dummy.out, lines=matrix_3x3_formatted, append=True)

>> Output lines of created file './dummy.out' with row inidces to console.
>> tp.from_source(source='./dummy.out')
>> tp.get_numbered_source_lines(output=True, nbrFormat='d')
0: 1 2 3
1: 4 5 6
2: 7 8 9
3: 1,2,3;4,5,6;7,8,9

********************************************************************************
** ALL TESTS/EXAMPLES SUCESSFULLY COMPLETED
********************************************************************************
